FUNCTIONS THAT OPERATE ON ARRAYS
    Most functions should be placed in this category, and may be called directly by the used onto
arrays, or, more desirably, alled with m_, l_, or e_apply. When writing functions, most should be
written in this format. Remember that functions from other packages that operate on arrays can also
be called using m_, l_, or e_apply.

    save_image                 : saves image
    phase_linearisation        : linearises phase data to a value between 0 and 1
    normalise                  : scales an array to a new range between two numbers
    m_sum                      : adds arrays together
    phase_binarisation         : binarises linearised phases to represent Up and Down polarisation
    threshold_noise            : a threshold function that attempts to minimise the number of noise
    contour_closure            : removes features in an image below a certain size
    find_a_domains             : finds a-domains in amplitude image
    create_domain_wall_filter  : creates a filter around any binarised structure
X    align_rows                 : aligns either rows or columns in image to have same average
    threshold_ratio            : threshold function, where you pass ratios between max and min 
    directional_skeletonize    : skeletonizes figures into vertical or horizontal lines
    final_a_domains            : cleans a-domain images
    switchmap                  : generates map and time of switching from binarised phases
    find_isolines              : find isolines on switchmap or switchmap-like object
    differentiate              : finds derivatives of image
    crop                       : crops outer rows and columns that contain a constant value
    uncrop_to_multiple         : adds outer rows and columns to a multiple of a given size
    compress_to_shape          : compresses areas of an array into pixels in a smaller array
    decompress_to_shape        : attempts to decompress a compressed array to original size\
    multi_power_law            : fits a power to steps in an array, from many sample fractions
    power_law_stats            : determines the major statistics from the power law fits
    power_law_ratios           : compares power law fits with different area fractions
    line_fit
    line_flatten_image
    plane_flatten_image
    qvector
    add_lattice_param_attributes_
    centre_peak
    find_peak_position
    morphological interpolation
    nan_gradient
    generate_interpolations


FUNCTIONS THAT ARE HARDCODED
    Some functions have had to be hardcoded to work on the .hdf5 format, either because they use
some unique tech provided natively by the file format, or holds multiple iteration runs in memory at 
the same time. These are called directly, with the arguments being a list that is read by 
path_search. See comments on the files themselves to see the list inputs. The reasons for why they
have been hardcoded are also written here - if you want to write a function that requires doing one
of these things, consider hardcoding that too

    distortion_params_         : calculates parameters for distortion correction
                                    # Uses previous parameters to predict current parameters
    distortion_correction_     : applies distortion correction
                                    # Looks at all parameters to figure out cropping
    find_a_domain_angle_       : finds rotation matrix that can be used to find a-domain rotation
                                    # Takes in an unlimited amount of parameters
                                    # Can take in an unlimited, second optional parameter
                                    # Temporarily stores a list of results to calculate final re
    rotation_alignment_        : applies rotation matrix on set of images image
                                    # Calcs params on first run only, to speed up subsequent scans
    switch_type_               : details type of switching from switchamp
                                    # Outputs unlimited amount of parameters
                                    # Creates two output folders